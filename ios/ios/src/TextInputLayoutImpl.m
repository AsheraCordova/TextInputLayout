//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSTextInputLayoutPlugin\src\main\java\com\ashera\textinputlayout\TextInputLayoutImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "AutoCompleteTextView.h"
#include "BaseHasWidgets.h"
#include "ColorStateList.h"
#include "ConverterFactory.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "EditText.h"
#include "Editable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FormElement.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "LinearLayout.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "TextInputLayoutImpl.h"
#include "TextWatcher.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@protocol JavaLangCharSequence;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASTextInputLayoutImpl () {
 @public
  id uiView_;
  ADLinearLayout *linearLayout_;
  id<ASIWidget> suffixTextView_;
  id<ASIWidget> prefixTextView_;
  id<ASHasWidgets> editTextHolder_;
  id<ASIWidget> mainWidget_;
  id<ASIWidget> endIcon_;
  id<ASIWidget> startIcon_;
  id<ASIWidget> counterView_;
  id<ASIWidget> hintView_;
  jboolean counterEnabled_;
  id<ASIWidget> editText_;
  jint maxLength_;
  NSString *placeholderText_;
  id placeholderTextColor_;
  id counterTextColor_;
  id counterOverflowTextColor_;
  jboolean hintEnabled_;
  jboolean helperTextEnabled_;
  id<ASIWidget> helperTextView_;
  jboolean errorEnabled_;
  id<ASIWidget> errorTextView_;
  id<ASIWidget> errorIcon_;
  id errorIconDrawable_;
  jint endIconMode_;
  id endIconDrawable_;
  jint boxBackgroundMode_;
  id<ASIWidget> innerLayout_;
  id boxStrokeErrorColor_;
  jboolean enabled_;
  id boxStrokeColor_;
  id counterOverflowTextAppearance_;
  id counterTextAppearance_;
  jboolean popUpShowing_;
  ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *builder_;
  ASTextInputLayoutImpl_TextInputLayoutBean *bean_;
  ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *paramsBuilder_;
  ASTextInputLayoutImpl_TextInputLayoutParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (jboolean)preSetChildAttributeWithASIWidget:(id<ASIWidget>)w
                        withASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue;

- (void)setSuffixTextWithId:(id)objValue;

- (void)setPrefixTextWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setEndIconDrawableWithId:(id)objValue;

- (void)setStartIconDrawableWithId:(id)objValue;

- (id)getEndIconDrawable;

- (id)getStartIconDrawable;

- (void)setCounterEnabledWithId:(id)objValue;

- (void)setCounterMaxLengthWithId:(id)objValue;

- (id)getCounterMaxLength;

- (jboolean)updateViewsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setCounterTextColorWithId:(id)objValue;

- (void)setCounterOverflowTextColorWithId:(id)objValue;

- (id)getCounterTextColor;

- (id)getCounterOverflowTextColor;

- (void)setPlaceholderTextColorWithId:(id)objValue;

- (void)setPlaceholderTextWithId:(id)objValue;

- (void)setSuffixTextColorWithId:(id)objValue;

- (void)setPrefixTextColorWithId:(id)objValue;

- (id)getSuffixTextColor;

- (id)getPrefixTextColor;

- (id)getPlaceholderTextColor;

- (void)setHintWithId:(id)objValue;

- (id)getHint;

- (id)getHintTextColor;

- (void)setHintTextColorWithId:(id)objValue;

- (void)setHintEnabledWithId:(id)objValue;

- (void)setStartIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue;

- (void)setStartIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue;

- (void)setEndIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue;

- (void)setEndIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue;

- (void)setEndIconVisibleWithId:(id)objValue;

- (void)setStartIconVisibleWithId:(id)objValue;

- (void)setHelperTextWithId:(id)objValue;

- (void)setHelperTextColorWithId:(id)objValue;

- (void)setHelperTextEnabledWithId:(id)objValue;

- (void)setErrorTextColorWithId:(id)objValue;

- (void)setErrorEnabledWithId:(id)objValue;

- (void)setMyErrorWithId:(id)objValue;

- (void)setErrorIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue;

- (void)setErrorIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue;

- (void)setErrorIconDrawableWithId:(id)objValue;

- (id)getErrorIconDrawable;

- (void)setEndIconModeWithId:(id)objValue;

- (id)getEndIconMode;

- (void)setBoxBackgroundColorStateListWithId:(id)objValue;

- (void)setBoxBackgroundModeWithId:(id)objValue;

- (void)setBoxStrokeWidthWithId:(id)objValue;

- (void)setBoxStrokeErrorColorWithId:(id)objValue;

- (void)setBoxCornerRadiusBottomStartWithId:(id)objValue;

- (void)setBoxCornerRadiusBottomEndWithId:(id)objValue;

- (void)setBoxCornerRadiusTopEndWithId:(id)objValue;

- (void)setBoxCornerRadiusTopStartWithId:(id)objValue;

- (void)fixBorderRadiusPaddingWithId:(id)objValue;

- (id)getBoxStrokeErrorColor;

- (void)setEnabledWithId:(id)objValue;

- (void)setBoxStrokeColorStateListWithId:(id)objValue;

- (void)updateIconStateWithBoolean:(jboolean)hide;

- (void)setHintTextAppearanceWithId:(id)objValue;

- (void)setSuffixTextAppearanceWithId:(id)objValue;

- (void)setCounterOverflowTextAppearanceWithId:(id)objValue;

- (void)setPrefixTextAppearanceWithId:(id)objValue;

- (void)setHelperTextTextAppearanceWithId:(id)objValue;

- (void)setErrorTextAppearanceWithId:(id)objValue;

- (void)setCounterTextAppearanceWithId:(id)objValue;

- (void)setErrorWithId:(id)object;

- (void)setBoxPaddingWithId:(id)objValue;

- (void)syncBackground;

- (jboolean)isPaddingFixNeeded;

@end

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, linearLayout_, ADLinearLayout *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, suffixTextView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, prefixTextView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, editTextHolder_, id<ASHasWidgets>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, mainWidget_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, endIcon_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, startIcon_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, counterView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, hintView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, editText_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, placeholderText_, NSString *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, placeholderTextColor_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, counterTextColor_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, counterOverflowTextColor_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, helperTextView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, errorTextView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, errorIcon_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, errorIconDrawable_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, endIconDrawable_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, innerLayout_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, boxStrokeErrorColor_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, boxStrokeColor_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, counterOverflowTextAppearance_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, counterTextAppearance_, id)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, builder_, ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, bean_, ASTextInputLayoutImpl_TextInputLayoutBean *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, paramsBuilder_, ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl, paramsBean_, ASTextInputLayoutImpl_TextInputLayoutParamsBean *)

__attribute__((unused)) static void ASTextInputLayoutImpl_setWidgetOnNativeClass(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_nativeRemoveViewWithASIWidget_(ASTextInputLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASTextInputLayoutImpl_createLayoutParamsWithADView_(ASTextInputLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADLinearLayout_LayoutParams *ASTextInputLayoutImpl_getLayoutParamsWithADView_(ASTextInputLayoutImpl *self, ADView *view);

__attribute__((unused)) static jboolean ASTextInputLayoutImpl_preSetChildAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_(ASTextInputLayoutImpl *self, id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setSuffixTextWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setPrefixTextWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_nativeCreateWithJavaUtilMap_(ASTextInputLayoutImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEndIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setStartIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getEndIconDrawable(ASTextInputLayoutImpl *self);

__attribute__((unused)) static id ASTextInputLayoutImpl_getStartIconDrawable(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterEnabledWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterMaxLengthWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getCounterMaxLength(ASTextInputLayoutImpl *self);

__attribute__((unused)) static jboolean ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(ASTextInputLayoutImpl *self, id<JavaLangCharSequence> s);

__attribute__((unused)) static void ASTextInputLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTextInputLayoutImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterOverflowTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getCounterTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static id ASTextInputLayoutImpl_getCounterOverflowTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setPlaceholderTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setPlaceholderTextWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setSuffixTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setPrefixTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getSuffixTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static id ASTextInputLayoutImpl_getPrefixTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static id ASTextInputLayoutImpl_getPlaceholderTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHintWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getHint(ASTextInputLayoutImpl *self);

__attribute__((unused)) static id ASTextInputLayoutImpl_getHintTextColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHintTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHintEnabledWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setStartIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setStartIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEndIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEndIconVisibleWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setStartIconVisibleWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHelperTextWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHelperTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHelperTextEnabledWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorTextColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorEnabledWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setMyErrorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getErrorIconDrawable(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEndIconModeWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getEndIconMode(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxBackgroundColorStateListWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxBackgroundModeWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxStrokeWidthWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxStrokeErrorColorWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxCornerRadiusBottomStartWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxCornerRadiusBottomEndWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxCornerRadiusTopEndWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxCornerRadiusTopStartWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASTextInputLayoutImpl_getBoxStrokeErrorColor(ASTextInputLayoutImpl *self);

__attribute__((unused)) static void ASTextInputLayoutImpl_setEnabledWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxStrokeColorStateListWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_updateIconStateWithBoolean_(ASTextInputLayoutImpl *self, jboolean hide);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHintTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setSuffixTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterOverflowTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setPrefixTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setHelperTextTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setCounterTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_setErrorWithId_(ASTextInputLayoutImpl *self, id object);

__attribute__((unused)) static void ASTextInputLayoutImpl_setBoxPaddingWithId_(ASTextInputLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_syncBackground(ASTextInputLayoutImpl *self);

__attribute__((unused)) static jboolean ASTextInputLayoutImpl_isPaddingFixNeeded(ASTextInputLayoutImpl *self);

@interface ASTextInputLayoutImpl_EndIconMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_EndIconMode, mapping_, id<JavaUtilMap>)

@interface ASTextInputLayoutImpl_BoxBackgroundMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_BoxBackgroundMode, mapping_, id<JavaUtilMap>)

@interface ASTextInputLayoutImpl_TextInputLayoutExt () {
 @public
  __unsafe_unretained ASTextInputLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_TextInputLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_TextInputLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_TextInputLayoutExt, templates_, id<JavaUtilMap>)

@interface ASTextInputLayoutImpl_1 : NSObject < ADTextWatcher > {
 @public
  ASTextInputLayoutImpl *this$0_;
  id<ADTextWatcher> val$oldTextWatcher_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$
                            withADTextWatcher:(id<ADTextWatcher>)capture$0;

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after;

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count;

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_1)

__attribute__((unused)) static void ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl_1 *self, ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0);

__attribute__((unused)) static ASTextInputLayoutImpl_1 *new_ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_1 *create_ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0);

@interface ASTextInputLayoutImpl_2 : ADDataSetObserver {
 @public
  ASTextInputLayoutImpl *this$0_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_2)

__attribute__((unused)) static void ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_2 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_2 *new_ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_2 *create_ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_3 : NSObject < ADAutoCompleteTextView_OnDismissListener > {
 @public
  ASTextInputLayoutImpl *this$0_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onDismiss;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_3)

__attribute__((unused)) static void ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_3 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_3 *new_ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_3 *create_ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_4 : NSObject < ADView_OnFocusChangeListener > {
 @public
  ASTextInputLayoutImpl *this$0_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_4)

__attribute__((unused)) static void ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_4 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_4 *new_ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_4 *create_ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_5 : NSObject < ADView_OnClickListener > {
 @public
  ASTextInputLayoutImpl *this$0_;
  jboolean password_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_5)

__attribute__((unused)) static void ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_5 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_5 *new_ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_5 *create_ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_6 : NSObject < ADView_OnClickListener > {
 @public
  ASTextInputLayoutImpl *this$0_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_6)

__attribute__((unused)) static void ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_6 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_6 *new_ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_6 *create_ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_7 : NSObject < ADView_OnClickListener > {
 @public
  ASTextInputLayoutImpl *this$0_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_7)

__attribute__((unused)) static void ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_7 *self, ASTextInputLayoutImpl *outer$);

__attribute__((unused)) static ASTextInputLayoutImpl_7 *new_ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_7 *create_ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$);

@interface ASTextInputLayoutImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(ASTextInputLayoutImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASTextInputLayoutImpl_OnClickListener *new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_OnClickListener *create_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASTextInputLayoutImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASTextInputLayoutImpl_OnClickListener *new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_OnClickListener *create_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASTextInputLayoutImpl_OnClickListener)

@interface ASTextInputLayoutImpl_OnLongClickListener : NSObject < ADView_OnLongClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onLongClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_OnLongClickListener)

J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnLongClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnLongClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnLongClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASTextInputLayoutImpl_OnLongClickListener, action_, NSString *)

__attribute__((unused)) static void ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASTextInputLayoutImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASTextInputLayoutImpl_OnLongClickListener *new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_OnLongClickListener *create_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASTextInputLayoutImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASTextInputLayoutImpl_OnLongClickListener *new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_OnLongClickListener *create_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASTextInputLayoutImpl_OnLongClickListener)

@interface ASTextInputLayoutImpl_TextInputLayoutCommandBuilder () {
 @public
  ASTextInputLayoutImpl *this$0_;
}

@end

@interface ASTextInputLayoutImpl_TextInputLayoutBean () {
 @public
  ASTextInputLayoutImpl *this$0_;
}

@end

@interface ASTextInputLayoutImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextInputLayoutImpl_$Lambda$1)

__attribute__((unused)) static void ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(ASTextInputLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASTextInputLayoutImpl_$Lambda$1 *new_ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextInputLayoutImpl_$Lambda$1 *create_ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

NSString *ASTextInputLayoutImpl_LOCAL_NAME = @"com.google.android.material.textfield.TextInputLayout";
NSString *ASTextInputLayoutImpl_GROUP_NAME = @"com.google.android.material.textfield.TextInputLayout";

@implementation ASTextInputLayoutImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"prefixText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"suffixText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endIconDrawable"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startIconDrawable"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterMaxLength"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterOverflowTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"placeholderText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"placeholderTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"prefixTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"suffixTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endIconOnClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endIconOnLongClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startIconOnClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startIconOnLongClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startIconVisible"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endIconVisible"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"helperTextEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"helperTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"helperText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"error"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorIconDrawable"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorIconOnClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorIconOnLongClick"])) withTypeWithNSString:@"string"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.textfield.TextInputLayout.EndIconMode", new_ASTextInputLayoutImpl_EndIconMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endIconMode"])) withTypeWithNSString:@"com.google.android.material.textfield.TextInputLayout.EndIconMode"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"com.google.android.material.textfield.TextInputLayout.BoxBackgroundMode", new_ASTextInputLayoutImpl_BoxBackgroundMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxBackgroundMode"])) withTypeWithNSString:@"com.google.android.material.textfield.TextInputLayout.BoxBackgroundMode"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxBackgroundColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxCornerRadiusTopStart"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxCornerRadiusTopEnd"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxCornerRadiusBottomEnd"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxCornerRadiusBottomStart"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxStrokeErrorColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxStrokeWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxStrokeColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterOverflowTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"counterTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"helperTextTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"prefixTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"suffixTextAppearance"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boxPadding"])) withTypeWithNSString:@"dimension"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextInputLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASTextInputLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASTextInputLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASTextInputLayoutImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  linearLayout_ = new_ASTextInputLayoutImpl_TextInputLayoutExt_initWithASTextInputLayoutImpl_(self);
  ASTextInputLayoutImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASTextInputLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASTextInputLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return linearLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADLinearLayout *) nil_chk(linearLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASTextInputLayoutImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADLinearLayout *) nil_chk(linearLayout_)) getChildCount]) {
    [((ADLinearLayout *) nil_chk(linearLayout_)) removeViewAtWithInt:index];
    ASTextInputLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASTextInputLayoutImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASTextInputLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADLinearLayout *) nil_chk(linearLayout_)) addViewWithADView:view];
    }
    else {
      [((ADLinearLayout *) nil_chk(linearLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASTextInputLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASTextInputLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if (ASTextInputLayoutImpl_preSetChildAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_(self, w, key, strValue, objValue)) {
    return;
  }
  ADLinearLayout_LayoutParams *layoutParams = ASTextInputLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASTextInputLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASTextInputLayoutImpl_TextInputLayoutExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"hint", @"prefixText", @"suffixText", @"endIconDrawable", @"startIconDrawable", @"counterEnabled", @"counterMaxLength", @"counterOverflowTextColor", @"counterTextColor", @"hintEnabled", @"hintTextColor", @"placeholderText", @"placeholderTextColor", @"prefixTextColor", @"suffixTextColor", @"endIconOnClick", @"endIconOnLongClick", @"startIconOnClick", @"startIconOnLongClick", @"startIconVisible", @"endIconVisible", @"helperTextEnabled", @"helperTextColor", @"helperText", @"error", @"errorEnabled", @"errorTextColor", @"errorIconDrawable", @"errorIconOnClick", @"errorIconOnLongClick", @"endIconMode", @"boxBackgroundMode", @"boxBackgroundColor", @"boxCornerRadiusTopStart", @"boxCornerRadiusTopEnd", @"boxCornerRadiusBottomEnd", @"boxCornerRadiusBottomStart", @"boxStrokeErrorColor", @"boxStrokeWidth", @"boxStrokeColor", @"enabled", @"hintTextAppearance", @"counterOverflowTextAppearance", @"counterTextAppearance", @"errorTextAppearance", @"helperTextTextAppearance", @"prefixTextAppearance", @"suffixTextAppearance", @"boxPadding" }, 49)) {
    case 0:
    {
      ASTextInputLayoutImpl_setHintWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASTextInputLayoutImpl_setPrefixTextWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASTextInputLayoutImpl_setSuffixTextWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASTextInputLayoutImpl_setEndIconDrawableWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASTextInputLayoutImpl_setStartIconDrawableWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASTextInputLayoutImpl_setCounterEnabledWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASTextInputLayoutImpl_setCounterMaxLengthWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASTextInputLayoutImpl_setCounterOverflowTextColorWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASTextInputLayoutImpl_setCounterTextColorWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASTextInputLayoutImpl_setHintEnabledWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASTextInputLayoutImpl_setHintTextColorWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASTextInputLayoutImpl_setPlaceholderTextWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASTextInputLayoutImpl_setPlaceholderTextColorWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASTextInputLayoutImpl_setPrefixTextColorWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASTextInputLayoutImpl_setSuffixTextColorWithId_(self, objValue);
    }
    break;
    case 15:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, (id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_()));
      }
    }
    break;
    case 16:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setEndIconOnLongClickListenerWithADView_OnLongClickListener_(self, new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setEndIconOnLongClickListenerWithADView_OnLongClickListener_(self, (id<ADView_OnLongClickListener>) cast_check(objValue, ADView_OnLongClickListener_class_()));
      }
    }
    break;
    case 17:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setStartIconOnClickListenerWithADView_OnClickListener_(self, new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setStartIconOnClickListenerWithADView_OnClickListener_(self, (id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_()));
      }
    }
    break;
    case 18:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setStartIconOnLongClickListenerWithADView_OnLongClickListener_(self, new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setStartIconOnLongClickListenerWithADView_OnLongClickListener_(self, (id<ADView_OnLongClickListener>) cast_check(objValue, ADView_OnLongClickListener_class_()));
      }
    }
    break;
    case 19:
    {
      ASTextInputLayoutImpl_setStartIconVisibleWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASTextInputLayoutImpl_setEndIconVisibleWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASTextInputLayoutImpl_setHelperTextEnabledWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASTextInputLayoutImpl_setHelperTextColorWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASTextInputLayoutImpl_setHelperTextWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASTextInputLayoutImpl_setMyErrorWithId_(self, objValue);
    }
    break;
    case 25:
    {
      ASTextInputLayoutImpl_setErrorEnabledWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASTextInputLayoutImpl_setErrorTextColorWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASTextInputLayoutImpl_setErrorIconDrawableWithId_(self, objValue);
    }
    break;
    case 28:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setErrorIconOnClickListenerWithADView_OnClickListener_(self, new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setErrorIconOnClickListenerWithADView_OnClickListener_(self, (id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_()));
      }
    }
    break;
    case 29:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASTextInputLayoutImpl_setErrorIconOnLongClickListenerWithADView_OnLongClickListener_(self, new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, strValue));
      }
      else {
        ASTextInputLayoutImpl_setErrorIconOnLongClickListenerWithADView_OnLongClickListener_(self, (id<ADView_OnLongClickListener>) cast_check(objValue, ADView_OnLongClickListener_class_()));
      }
    }
    break;
    case 30:
    {
      ASTextInputLayoutImpl_setEndIconModeWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASTextInputLayoutImpl_setBoxBackgroundModeWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASTextInputLayoutImpl_setBoxBackgroundColorStateListWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASTextInputLayoutImpl_setBoxCornerRadiusTopStartWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASTextInputLayoutImpl_setBoxCornerRadiusTopEndWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASTextInputLayoutImpl_setBoxCornerRadiusBottomEndWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASTextInputLayoutImpl_setBoxCornerRadiusBottomStartWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASTextInputLayoutImpl_setBoxStrokeErrorColorWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASTextInputLayoutImpl_setBoxStrokeWidthWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASTextInputLayoutImpl_setBoxStrokeColorStateListWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASTextInputLayoutImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASTextInputLayoutImpl_setHintTextAppearanceWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASTextInputLayoutImpl_setCounterOverflowTextAppearanceWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASTextInputLayoutImpl_setCounterTextAppearanceWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASTextInputLayoutImpl_setErrorTextAppearanceWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASTextInputLayoutImpl_setHelperTextTextAppearanceWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASTextInputLayoutImpl_setPrefixTextAppearanceWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASTextInputLayoutImpl_setSuffixTextAppearanceWithId_(self, objValue);
    }
    break;
    case 48:
    {
      ASTextInputLayoutImpl_setBoxPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASTextInputLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"hint", @"endIconDrawable", @"startIconDrawable", @"counterMaxLength", @"counterOverflowTextColor", @"counterTextColor", @"hintTextColor", @"placeholderTextColor", @"prefixTextColor", @"suffixTextColor", @"errorIconDrawable", @"endIconMode", @"boxStrokeErrorColor" }, 13)) {
    case 0:
    {
      return ASTextInputLayoutImpl_getHint(self);
    }
    case 1:
    {
      return ASTextInputLayoutImpl_getEndIconDrawable(self);
    }
    case 2:
    {
      return ASTextInputLayoutImpl_getStartIconDrawable(self);
    }
    case 3:
    {
      return ASTextInputLayoutImpl_getCounterMaxLength(self);
    }
    case 4:
    {
      return ASTextInputLayoutImpl_getCounterOverflowTextColor(self);
    }
    case 5:
    {
      return ASTextInputLayoutImpl_getCounterTextColor(self);
    }
    case 6:
    {
      return ASTextInputLayoutImpl_getHintTextColor(self);
    }
    case 7:
    {
      return ASTextInputLayoutImpl_getPlaceholderTextColor(self);
    }
    case 8:
    {
      return ASTextInputLayoutImpl_getPrefixTextColor(self);
    }
    case 9:
    {
      return ASTextInputLayoutImpl_getSuffixTextColor(self);
    }
    case 10:
    {
      return ASTextInputLayoutImpl_getErrorIconDrawable(self);
    }
    case 11:
    {
      return ASTextInputLayoutImpl_getEndIconMode(self);
    }
    case 12:
    {
      return ASTextInputLayoutImpl_getBoxStrokeErrorColor(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASTextInputLayoutImpl_setErrorWithId_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASTextInputLayoutImpl_setErrorWithId_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (jboolean)preSetChildAttributeWithASIWidget:(id<ASIWidget>)w
                        withASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue {
  return ASTextInputLayoutImpl_preSetChildAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_(self, w, key, strValue, objValue);
}

- (void)setSuffixTextWithId:(id)objValue {
  ASTextInputLayoutImpl_setSuffixTextWithId_(self, objValue);
}

- (void)setPrefixTextWithId:(id)objValue {
  ASTextInputLayoutImpl_setPrefixTextWithId_(self, objValue);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASTextInputLayoutImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)initialized {
  [super initialized];
  if ([((id<JavaUtilList>) nil_chk([((id<ASHasWidgets>) nil_chk(editTextHolder_)) getWidgets])) size] > 0) {
    editText_ = [((id<ASHasWidgets>) nil_chk(editTextHolder_)) getWithInt:0];
    id<ADTextWatcher> oldTextWatcher = (id<ADTextWatcher>) cast_check([((id<ASIWidget>) nil_chk(editText_)) getAttributeWithNSString:@"onTextChange" withBoolean:true], ADTextWatcher_class_());
    id<ADTextWatcher> textWatcher = new_ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(self, oldTextWatcher);
    [((id<ASIWidget>) nil_chk(editText_)) setAttributeWithNSString:@"onTextChange" withId:textWatcher withBoolean:true];
    ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(self, (NSString *) cast_chk([((id<ASIWidget>) nil_chk(editText_)) getAttributeWithNSString:@"text" withBoolean:true], [NSString class]));
    ASTextInputLayoutImpl_syncBackground(self);
  }
}

- (id<ASHasWidgets>)getCompositeLeafWithASIWidget:(id<ASIWidget>)w {
  if ([ADEditText_class_() isAssignableFrom:[((id<ASIWidget>) nil_chk(w)) getViewClass]]) {
    return editTextHolder_;
  }
  return [super getCompositeLeafWithASIWidget:w];
}

- (void)setEndIconDrawableWithId:(id)objValue {
  ASTextInputLayoutImpl_setEndIconDrawableWithId_(self, objValue);
}

- (void)setEndIconInternalWithId:(id)objValue
                     withBoolean:(jboolean)skipConvert {
  [((id<ASIWidget>) nil_chk(endIcon_)) setVisibleWithBoolean:true];
  [((id<ASIWidget>) nil_chk(endIcon_)) setAttributeWithNSString:@"src" withId:objValue withBoolean:skipConvert];
  [((id<ASIWidget>) nil_chk(endIcon_)) requestLayout];
}

- (void)setStartIconDrawableWithId:(id)objValue {
  ASTextInputLayoutImpl_setStartIconDrawableWithId_(self, objValue);
}

- (id)getEndIconDrawable {
  return ASTextInputLayoutImpl_getEndIconDrawable(self);
}

- (id)getStartIconDrawable {
  return ASTextInputLayoutImpl_getStartIconDrawable(self);
}

- (void)setCounterEnabledWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterEnabledWithId_(self, objValue);
}

- (void)setCounterMaxLengthWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterMaxLengthWithId_(self, objValue);
}

- (id)getCounterMaxLength {
  return ASTextInputLayoutImpl_getCounterMaxLength(self);
}

- (jboolean)updateViewsWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  return ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(self, s);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTextInputLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setCounterTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterTextColorWithId_(self, objValue);
}

- (void)setCounterOverflowTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterOverflowTextColorWithId_(self, objValue);
}

- (id)getCounterTextColor {
  return ASTextInputLayoutImpl_getCounterTextColor(self);
}

- (id)getCounterOverflowTextColor {
  return ASTextInputLayoutImpl_getCounterOverflowTextColor(self);
}

- (void)setPlaceholderTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setPlaceholderTextColorWithId_(self, objValue);
}

- (void)setPlaceholderTextWithId:(id)objValue {
  ASTextInputLayoutImpl_setPlaceholderTextWithId_(self, objValue);
}

- (void)setSuffixTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setSuffixTextColorWithId_(self, objValue);
}

- (void)setPrefixTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setPrefixTextColorWithId_(self, objValue);
}

- (id)getSuffixTextColor {
  return ASTextInputLayoutImpl_getSuffixTextColor(self);
}

- (id)getPrefixTextColor {
  return ASTextInputLayoutImpl_getPrefixTextColor(self);
}

- (id)getPlaceholderTextColor {
  return ASTextInputLayoutImpl_getPlaceholderTextColor(self);
}

- (void)setHintWithId:(id)objValue {
  ASTextInputLayoutImpl_setHintWithId_(self, objValue);
}

- (id)getHint {
  return ASTextInputLayoutImpl_getHint(self);
}

- (id)getHintTextColor {
  return ASTextInputLayoutImpl_getHintTextColor(self);
}

- (void)setHintTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setHintTextColorWithId_(self, objValue);
}

- (void)setHintEnabledWithId:(id)objValue {
  ASTextInputLayoutImpl_setHintEnabledWithId_(self, objValue);
}

- (void)setStartIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue {
  ASTextInputLayoutImpl_setStartIconOnLongClickListenerWithADView_OnLongClickListener_(self, objValue);
}

- (void)setStartIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue {
  ASTextInputLayoutImpl_setStartIconOnClickListenerWithADView_OnClickListener_(self, objValue);
}

- (void)setEndIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue {
  ASTextInputLayoutImpl_setEndIconOnLongClickListenerWithADView_OnLongClickListener_(self, objValue);
}

- (void)setEndIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue {
  ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, objValue);
}

- (void)setEndIconVisibleWithId:(id)objValue {
  ASTextInputLayoutImpl_setEndIconVisibleWithId_(self, objValue);
}

- (void)setStartIconVisibleWithId:(id)objValue {
  ASTextInputLayoutImpl_setStartIconVisibleWithId_(self, objValue);
}

- (void)setHelperTextWithId:(id)objValue {
  ASTextInputLayoutImpl_setHelperTextWithId_(self, objValue);
}

- (void)setHelperTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setHelperTextColorWithId_(self, objValue);
}

- (void)setHelperTextEnabledWithId:(id)objValue {
  ASTextInputLayoutImpl_setHelperTextEnabledWithId_(self, objValue);
}

- (void)setErrorTextColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setErrorTextColorWithId_(self, objValue);
}

- (void)setErrorEnabledWithId:(id)objValue {
  ASTextInputLayoutImpl_setErrorEnabledWithId_(self, objValue);
}

- (void)setMyErrorWithId:(id)objValue {
  ASTextInputLayoutImpl_setMyErrorWithId_(self, objValue);
}

- (void)setErrorIconOnLongClickListenerWithADView_OnLongClickListener:(id<ADView_OnLongClickListener>)objValue {
  ASTextInputLayoutImpl_setErrorIconOnLongClickListenerWithADView_OnLongClickListener_(self, objValue);
}

- (void)setErrorIconOnClickListenerWithADView_OnClickListener:(id<ADView_OnClickListener>)objValue {
  ASTextInputLayoutImpl_setErrorIconOnClickListenerWithADView_OnClickListener_(self, objValue);
}

- (void)setErrorIconDrawableWithId:(id)objValue {
  ASTextInputLayoutImpl_setErrorIconDrawableWithId_(self, objValue);
}

- (id)getErrorIconDrawable {
  return ASTextInputLayoutImpl_getErrorIconDrawable(self);
}

- (void)setEndIconModeWithId:(id)objValue {
  ASTextInputLayoutImpl_setEndIconModeWithId_(self, objValue);
}

- (id)getEndIconMode {
  return ASTextInputLayoutImpl_getEndIconMode(self);
}

- (void)setBoxBackgroundColorStateListWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxBackgroundColorStateListWithId_(self, objValue);
}

- (void)setBoxBackgroundModeWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxBackgroundModeWithId_(self, objValue);
}

- (void)setBoxStrokeWidthWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxStrokeWidthWithId_(self, objValue);
}

- (void)setBoxStrokeErrorColorWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxStrokeErrorColorWithId_(self, objValue);
}

- (void)setBoxCornerRadiusBottomStartWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxCornerRadiusBottomStartWithId_(self, objValue);
}

- (void)setBoxCornerRadiusBottomEndWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxCornerRadiusBottomEndWithId_(self, objValue);
}

- (void)setBoxCornerRadiusTopEndWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxCornerRadiusTopEndWithId_(self, objValue);
}

- (void)setBoxCornerRadiusTopStartWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxCornerRadiusTopStartWithId_(self, objValue);
}

- (void)fixBorderRadiusPaddingWithId:(id)objValue {
  ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(self, objValue);
}

- (id)getBoxStrokeErrorColor {
  return ASTextInputLayoutImpl_getBoxStrokeErrorColor(self);
}

- (void)setEnabledWithId:(id)objValue {
  ASTextInputLayoutImpl_setEnabledWithId_(self, objValue);
}

- (void)setBoxStrokeColorStateListWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxStrokeColorStateListWithId_(self, objValue);
}

- (void)updateIconStateWithBoolean:(jboolean)hide {
  ASTextInputLayoutImpl_updateIconStateWithBoolean_(self, hide);
}

- (void)setHintTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setHintTextAppearanceWithId_(self, objValue);
}

- (void)setSuffixTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setSuffixTextAppearanceWithId_(self, objValue);
}

- (void)setCounterOverflowTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterOverflowTextAppearanceWithId_(self, objValue);
}

- (void)setPrefixTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setPrefixTextAppearanceWithId_(self, objValue);
}

- (void)setHelperTextTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setHelperTextTextAppearanceWithId_(self, objValue);
}

- (void)setErrorTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setErrorTextAppearanceWithId_(self, objValue);
}

- (void)setCounterTextAppearanceWithId:(id)objValue {
  ASTextInputLayoutImpl_setCounterTextAppearanceWithId_(self, objValue);
}

- (void)setErrorWithId:(id)object {
  ASTextInputLayoutImpl_setErrorWithId_(self, object);
}

- (NSString *)getTextEntered {
  if (editText_ == nil) {
    return @"";
  }
  return (NSString *) cast_chk([editText_ getAttributeWithNSString:@"text" withBoolean:true], [NSString class]);
}

- (jboolean)isViewVisible {
  return [((ADLinearLayout *) nil_chk(linearLayout_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
  if (editText_ == nil) {
    return;
  }
  [editText_ setAttributeWithNSString:@"setFocus" withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
}

- (void)setBoxPaddingWithId:(id)objValue {
  ASTextInputLayoutImpl_setBoxPaddingWithId_(self, objValue);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADLinearLayout *) nil_chk(linearLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASTextInputLayoutImpl_TextInputLayoutBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASTextInputLayoutImpl_TextInputLayoutBean_initWithASTextInputLayoutImpl_(self);
  }
  return bean_;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASTextInputLayoutImpl_TextInputLayoutCommandBuilder_initWithASTextInputLayoutImpl_(self);
  }
  return builder_;
}

- (ASTextInputLayoutImpl_TextInputLayoutParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASTextInputLayoutImpl_TextInputLayoutParamsBean_initWithASTextInputLayoutImpl_(self);
  }
  return paramsBean_;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder_initWithASTextInputLayoutImpl_(self);
  }
  return paramsBuilder_;
}

- (void)syncBackground {
  ASTextInputLayoutImpl_syncBackground(self);
}

- (jboolean)isPaddingFixNeeded {
  return ASTextInputLayoutImpl_isPaddingFixNeeded(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASHasWidgets;", 0x1, 32, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 81, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 81, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 93, 1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(resetError);
  methods[24].selector = @selector(showErrorWithNSString:);
  methods[25].selector = @selector(preSetChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[26].selector = @selector(setSuffixTextWithId:);
  methods[27].selector = @selector(setPrefixTextWithId:);
  methods[28].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[29].selector = @selector(initialized);
  methods[30].selector = @selector(getCompositeLeafWithASIWidget:);
  methods[31].selector = @selector(setEndIconDrawableWithId:);
  methods[32].selector = @selector(setEndIconInternalWithId:withBoolean:);
  methods[33].selector = @selector(setStartIconDrawableWithId:);
  methods[34].selector = @selector(getEndIconDrawable);
  methods[35].selector = @selector(getStartIconDrawable);
  methods[36].selector = @selector(setCounterEnabledWithId:);
  methods[37].selector = @selector(setCounterMaxLengthWithId:);
  methods[38].selector = @selector(getCounterMaxLength);
  methods[39].selector = @selector(updateViewsWithJavaLangCharSequence:);
  methods[40].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[41].selector = @selector(setCounterTextColorWithId:);
  methods[42].selector = @selector(setCounterOverflowTextColorWithId:);
  methods[43].selector = @selector(getCounterTextColor);
  methods[44].selector = @selector(getCounterOverflowTextColor);
  methods[45].selector = @selector(setPlaceholderTextColorWithId:);
  methods[46].selector = @selector(setPlaceholderTextWithId:);
  methods[47].selector = @selector(setSuffixTextColorWithId:);
  methods[48].selector = @selector(setPrefixTextColorWithId:);
  methods[49].selector = @selector(getSuffixTextColor);
  methods[50].selector = @selector(getPrefixTextColor);
  methods[51].selector = @selector(getPlaceholderTextColor);
  methods[52].selector = @selector(setHintWithId:);
  methods[53].selector = @selector(getHint);
  methods[54].selector = @selector(getHintTextColor);
  methods[55].selector = @selector(setHintTextColorWithId:);
  methods[56].selector = @selector(setHintEnabledWithId:);
  methods[57].selector = @selector(setStartIconOnLongClickListenerWithADView_OnLongClickListener:);
  methods[58].selector = @selector(setStartIconOnClickListenerWithADView_OnClickListener:);
  methods[59].selector = @selector(setEndIconOnLongClickListenerWithADView_OnLongClickListener:);
  methods[60].selector = @selector(setEndIconOnClickListenerWithADView_OnClickListener:);
  methods[61].selector = @selector(setEndIconVisibleWithId:);
  methods[62].selector = @selector(setStartIconVisibleWithId:);
  methods[63].selector = @selector(setHelperTextWithId:);
  methods[64].selector = @selector(setHelperTextColorWithId:);
  methods[65].selector = @selector(setHelperTextEnabledWithId:);
  methods[66].selector = @selector(setErrorTextColorWithId:);
  methods[67].selector = @selector(setErrorEnabledWithId:);
  methods[68].selector = @selector(setMyErrorWithId:);
  methods[69].selector = @selector(setErrorIconOnLongClickListenerWithADView_OnLongClickListener:);
  methods[70].selector = @selector(setErrorIconOnClickListenerWithADView_OnClickListener:);
  methods[71].selector = @selector(setErrorIconDrawableWithId:);
  methods[72].selector = @selector(getErrorIconDrawable);
  methods[73].selector = @selector(setEndIconModeWithId:);
  methods[74].selector = @selector(getEndIconMode);
  methods[75].selector = @selector(setBoxBackgroundColorStateListWithId:);
  methods[76].selector = @selector(setBoxBackgroundModeWithId:);
  methods[77].selector = @selector(setBoxStrokeWidthWithId:);
  methods[78].selector = @selector(setBoxStrokeErrorColorWithId:);
  methods[79].selector = @selector(setBoxCornerRadiusBottomStartWithId:);
  methods[80].selector = @selector(setBoxCornerRadiusBottomEndWithId:);
  methods[81].selector = @selector(setBoxCornerRadiusTopEndWithId:);
  methods[82].selector = @selector(setBoxCornerRadiusTopStartWithId:);
  methods[83].selector = @selector(fixBorderRadiusPaddingWithId:);
  methods[84].selector = @selector(getBoxStrokeErrorColor);
  methods[85].selector = @selector(setEnabledWithId:);
  methods[86].selector = @selector(setBoxStrokeColorStateListWithId:);
  methods[87].selector = @selector(updateIconStateWithBoolean:);
  methods[88].selector = @selector(setHintTextAppearanceWithId:);
  methods[89].selector = @selector(setSuffixTextAppearanceWithId:);
  methods[90].selector = @selector(setCounterOverflowTextAppearanceWithId:);
  methods[91].selector = @selector(setPrefixTextAppearanceWithId:);
  methods[92].selector = @selector(setHelperTextTextAppearanceWithId:);
  methods[93].selector = @selector(setErrorTextAppearanceWithId:);
  methods[94].selector = @selector(setCounterTextAppearanceWithId:);
  methods[95].selector = @selector(setErrorWithId:);
  methods[96].selector = @selector(getTextEntered);
  methods[97].selector = @selector(isViewVisible);
  methods[98].selector = @selector(focus);
  methods[99].selector = @selector(setBoxPaddingWithId:);
  methods[100].selector = @selector(setIdWithNSString:);
  methods[101].selector = @selector(setVisibleWithBoolean:);
  methods[102].selector = @selector(getPluginWithNSString:);
  methods[103].selector = @selector(getBean);
  methods[104].selector = @selector(getBuilder);
  methods[105].selector = @selector(getParamsBean);
  methods[106].selector = @selector(getParamsBuilder);
  methods[107].selector = @selector(syncBackground);
  methods[108].selector = @selector(isPaddingFixNeeded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 94, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 95, -1, -1 },
    { "linearLayout_", "LADLinearLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suffixTextView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prefixTextView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "editTextHolder_", "LASHasWidgets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mainWidget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endIcon_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startIcon_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hintView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "editText_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "placeholderText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "placeholderTextColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterTextColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterOverflowTextColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hintEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "helperTextEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "helperTextView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorTextView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorIcon_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorIconDrawable_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endIconMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endIconDrawable_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boxBackgroundMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerLayout_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boxStrokeErrorColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "enabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boxStrokeColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterOverflowTextAppearance_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counterTextAppearance_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "popUpShowing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASTextInputLayoutImpl_TextInputLayoutBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASTextInputLayoutImpl_TextInputLayoutParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "showError", "preSetChildAttribute", "setSuffixText", "LNSObject;", "setPrefixText", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "getCompositeLeaf", "setEndIconDrawable", "setEndIconInternal", "LNSObject;Z", "setStartIconDrawable", "setCounterEnabled", "setCounterMaxLength", "updateViews", "LJavaLangCharSequence;", "postSetAttribute", "setCounterTextColor", "setCounterOverflowTextColor", "setPlaceholderTextColor", "setPlaceholderText", "setSuffixTextColor", "setPrefixTextColor", "setHint", "setHintTextColor", "setHintEnabled", "setStartIconOnLongClickListener", "LADView_OnLongClickListener;", "setStartIconOnClickListener", "LADView_OnClickListener;", "setEndIconOnLongClickListener", "setEndIconOnClickListener", "setEndIconVisible", "setStartIconVisible", "setHelperText", "setHelperTextColor", "setHelperTextEnabled", "setErrorTextColor", "setErrorEnabled", "setMyError", "setErrorIconOnLongClickListener", "setErrorIconOnClickListener", "setErrorIconDrawable", "setEndIconMode", "setBoxBackgroundColorStateList", "setBoxBackgroundMode", "setBoxStrokeWidth", "setBoxStrokeErrorColor", "setBoxCornerRadiusBottomStart", "setBoxCornerRadiusBottomEnd", "setBoxCornerRadiusTopEnd", "setBoxCornerRadiusTopStart", "fixBorderRadiusPadding", "setEnabled", "setBoxStrokeColorStateList", "updateIconState", "Z", "setHintTextAppearance", "setSuffixTextAppearance", "setCounterOverflowTextAppearance", "setPrefixTextAppearance", "setHelperTextTextAppearance", "setErrorTextAppearance", "setCounterTextAppearance", "setError", "setBoxPadding", "setId", "setVisible", "getPlugin", &ASTextInputLayoutImpl_LOCAL_NAME, &ASTextInputLayoutImpl_GROUP_NAME, "LASTextInputLayoutImpl_EndIconMode;LASTextInputLayoutImpl_BoxBackgroundMode;LASTextInputLayoutImpl_TextInputLayoutExt;LASTextInputLayoutImpl_OnClickListener;LASTextInputLayoutImpl_OnLongClickListener;LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;LASTextInputLayoutImpl_TextInputLayoutBean;LASTextInputLayoutImpl_TextInputLayoutParamsBean;LASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl = { "TextInputLayoutImpl", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x1, 109, 40, -1, 96, -1, -1, -1 };
  return &_ASTextInputLayoutImpl;
}

@end

void ASTextInputLayoutImpl_init(ASTextInputLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTextInputLayoutImpl_GROUP_NAME, ASTextInputLayoutImpl_LOCAL_NAME);
  self->maxLength_ = -1;
  self->hintEnabled_ = true;
  self->endIconMode_ = 0;
  self->enabled_ = true;
  self->boxStrokeColor_ = @"#000";
}

ASTextInputLayoutImpl *new_ASTextInputLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl, init)
}

ASTextInputLayoutImpl *create_ASTextInputLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl, init)
}

void ASTextInputLayoutImpl_initWithNSString_(ASTextInputLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTextInputLayoutImpl_GROUP_NAME, localname);
  self->maxLength_ = -1;
  self->hintEnabled_ = true;
  self->endIconMode_ = 0;
  self->enabled_ = true;
  self->boxStrokeColor_ = @"#000";
}

ASTextInputLayoutImpl *new_ASTextInputLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl, initWithNSString_, localname)
}

ASTextInputLayoutImpl *create_ASTextInputLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl, initWithNSString_, localname)
}

void ASTextInputLayoutImpl_initWithNSString_withNSString_(ASTextInputLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->maxLength_ = -1;
  self->hintEnabled_ = true;
  self->endIconMode_ = 0;
  self->enabled_ = true;
  self->boxStrokeColor_ = @"#000";
}

ASTextInputLayoutImpl *new_ASTextInputLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASTextInputLayoutImpl *create_ASTextInputLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASTextInputLayoutImpl_setWidgetOnNativeClass(ASTextInputLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASTextInputLayoutImpl_nativeRemoveViewWithASIWidget_(ASTextInputLayoutImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADLinearLayout *) nil_chk(self->linearLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASTextInputLayoutImpl_createLayoutParamsWithADView_(ASTextInputLayoutImpl *self, ADView *view) {
  ADLinearLayout_LayoutParams *layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
  layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADLinearLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADLinearLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADLinearLayout_LayoutParams *ASTextInputLayoutImpl_getLayoutParamsWithADView_(ASTextInputLayoutImpl *self, ADView *view) {
  return (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
}

jboolean ASTextInputLayoutImpl_preSetChildAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_(ASTextInputLayoutImpl *self, id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue) {
  return false;
}

void ASTextInputLayoutImpl_setSuffixTextWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->suffixTextView_)) setAttributeWithNSString:@"text" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setPrefixTextWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->prefixTextView_)) setAttributeWithNSString:@"text" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_nativeCreateWithJavaUtilMap_(ASTextInputLayoutImpl *self, id<JavaUtilMap> params) {
  NSString *layout = @"@layout/design_textinputlayout";
  id<ASIWidget> template_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[self getParent]];
  self->linearLayout_ = (ADLinearLayout *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADLinearLayout class]);
  self->uiView_ = [widget asNativeWidget];
  self->suffixTextView_ = [widget findWidgetByIdWithNSString:@"@+id/textinput_suffix_text"];
  self->prefixTextView_ = [widget findWidgetByIdWithNSString:@"@+id/textinput_prefix_text"];
  self->editTextHolder_ = (id<ASHasWidgets>) cast_check([widget findWidgetByIdWithNSString:@"@+id/editTextHolder"], ASHasWidgets_class_());
  self->endIcon_ = [widget findWidgetByIdWithNSString:@"@+id/text_input_end_icon"];
  self->startIcon_ = [widget findWidgetByIdWithNSString:@"@+id/text_input_start_icon"];
  self->counterView_ = [widget findWidgetByIdWithNSString:@"@+id/counter_view"];
  self->hintView_ = [widget findWidgetByIdWithNSString:@"@+id/hint"];
  self->helperTextView_ = [widget findWidgetByIdWithNSString:@"@+id/helperText_view"];
  self->errorTextView_ = [widget findWidgetByIdWithNSString:@"@+id/error_view"];
  self->errorIcon_ = [widget findWidgetByIdWithNSString:@"@+id/text_input_error_icon"];
  self->innerLayout_ = [widget findWidgetByIdWithNSString:@"@+id/inputFrame"];
  self->mainWidget_ = widget;
}

void ASTextInputLayoutImpl_setEndIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->endIconDrawable_ = objValue;
  if (self->endIconMode_ == -1 && objValue != nil) {
    [self setEndIconInternalWithId:objValue withBoolean:true];
  }
}

void ASTextInputLayoutImpl_setStartIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->startIcon_)) setVisibleWithBoolean:true];
  [((id<ASIWidget>) nil_chk(self->startIcon_)) setAttributeWithNSString:@"src" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->startIcon_)) requestLayout];
}

id ASTextInputLayoutImpl_getEndIconDrawable(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->endIcon_)) getAttributeWithNSString:@"src" withBoolean:true];
}

id ASTextInputLayoutImpl_getStartIconDrawable(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->startIcon_)) getAttributeWithNSString:@"src" withBoolean:true];
}

void ASTextInputLayoutImpl_setCounterEnabledWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->counterEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  [((id<ASIWidget>) nil_chk(self->counterView_)) setVisibleWithBoolean:self->counterEnabled_];
  [((id<ASIWidget>) nil_chk(self->counterView_)) requestLayout];
}

void ASTextInputLayoutImpl_setCounterMaxLengthWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->maxLength_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

id ASTextInputLayoutImpl_getCounterMaxLength(ASTextInputLayoutImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->maxLength_);
}

jboolean ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(ASTextInputLayoutImpl *self, id<JavaLangCharSequence> s) {
  jboolean remeasure = false;
  if (self->counterEnabled_) {
    JavaLangStringBuilder *b = new_JavaLangStringBuilder_initWithNSString_(JreStrcat("I", [((id<JavaLangCharSequence>) nil_chk(s)) java_length]));
    if (self->maxLength_ != -1) {
      (void) [b appendWithNSString:JreStrcat("CI", '/', self->maxLength_)];
      if ([s java_length] > self->maxLength_) {
        if (self->counterOverflowTextAppearance_ != nil) {
          [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textAppearance" withId:self->counterOverflowTextAppearance_ withBoolean:true];
          [((id<ASIWidget>) nil_chk(self->counterView_)) requestLayout];
          remeasure = true;
        }
        if (self->counterOverflowTextColor_ != nil) {
          [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textColor" withId:self->counterOverflowTextColor_ withBoolean:true];
        }
      }
      else {
        if (self->counterTextAppearance_ != nil && self->counterOverflowTextAppearance_ != nil) {
          [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textAppearance" withId:self->counterTextAppearance_ withBoolean:true];
          [((id<ASIWidget>) nil_chk(self->counterView_)) requestLayout];
          remeasure = true;
        }
        if (self->counterOverflowTextColor_ != nil) {
          if (self->counterTextColor_ == nil) {
            [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textColor" withId:@"#000" withBoolean:false];
          }
          else {
            [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textColor" withId:self->counterTextColor_ withBoolean:true];
          }
        }
      }
    }
    [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"text" withId:[b description] withBoolean:true];
  }
  if (self->editText_ != nil) {
    if (self->placeholderText_ != nil) {
      [self->editText_ setAttributeWithNSString:@"hint" withId:self->placeholderText_ withBoolean:true];
    }
    if (self->placeholderTextColor_ != nil) {
      [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithNSString:@"textColorHint" withId:self->placeholderTextColor_ withBoolean:true];
    }
    if (self->hintEnabled_) {
      if (s == nil || [s isEqual:@""]) {
        [((id<ASIWidget>) nil_chk(self->hintView_)) setVisibleWithBoolean:false];
        [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->hintView_)) asWidget], [ADView class])))) setVisibilityWithInt:ADView_INVISIBLE];
      }
      else {
        [((id<ASIWidget>) nil_chk(self->hintView_)) setVisibleWithBoolean:true];
      }
    }
    if (self->hintEnabled_) {
      ADView *hintAView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->hintView_)) asWidget], [ADView class]);
      [((ADView *) nil_chk(hintAView)) measureWithInt:0 withInt:0];
      jint hintMeasuredHeight = [hintAView getMeasuredHeight];
      jint hintMeasuredWidth = [hintAView getMeasuredWidth];
      jint editTextPaddingTop = [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->editText_)) asWidget], [ADView class])))) getPaddingTop];
      if (self->boxBackgroundMode_ != 2) {
        if (hintMeasuredWidth > 0 && hintMeasuredHeight > editTextPaddingTop) {
          hintMeasuredHeight = editTextPaddingTop;
        }
        [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"layout_marginBottom" withId:JavaLangInteger_valueOfWithInt_(hintMeasuredHeight * -1) withBoolean:true];
      }
      else {
        [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"layout_marginBottom" withId:JavaLangInteger_valueOfWithInt_(JreIntDiv(hintMeasuredHeight * -1, 2)) withBoolean:true];
      }
      if (hintMeasuredWidth > 0) {
        [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"layout_marginStart" withId:JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->editText_)) asWidget], [ADView class])))) getPaddingStart]) withBoolean:true];
      }
    }
    [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithNSString:@"enabled" withId:JavaLangBoolean_valueOfWithBoolean_(self->enabled_) withBoolean:true];
    [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithNSString:@"password" withId:JavaLangBoolean_valueOfWithBoolean_(self->endIconMode_ == 1) withBoolean:true];
    if (self->endIconMode_ == 3) {
      (void) [((id<ASIWidget>) nil_chk(self->editText_)) invokeMethodWithNSString:@"setDataObserver" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(self) } count:1 type:NSObject_class_()]];
      [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithNSString:@"onDismiss" withId:new_ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(self) withBoolean:true];
      [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithNSString:@"onFocusChange" withId:new_ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(self) withBoolean:true];
    }
    [((id<ASIWidget>) nil_chk(self->editText_)) requestLayout];
  }
  if (self->boxBackgroundMode_ == 2) {
    NSString *errorText = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(self->errorTextView_)) getAttributeWithNSString:@"text" withBoolean:true], [NSString class]);
    if (self->errorEnabled_ && errorText != nil && ![errorText java_isEmpty]) {
      [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderColor" withId:self->boxStrokeErrorColor_ withBoolean:true];
    }
    else {
      [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderColor" withId:self->boxStrokeColor_ withBoolean:!([self->boxStrokeColor_ isKindOfClass:[NSString class]])];
    }
  }
  return remeasure;
}

void ASTextInputLayoutImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTextInputLayoutImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if ([self isInitialised] && self->editText_ != nil) {
    ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(self, (NSString *) cast_chk([self->editText_ getAttributeWithNSString:@"text" withBoolean:true], [NSString class]));
  }
}

void ASTextInputLayoutImpl_setCounterTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->counterTextColor_ = objValue;
  [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setCounterOverflowTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->counterOverflowTextColor_ = objValue;
}

id ASTextInputLayoutImpl_getCounterTextColor(ASTextInputLayoutImpl *self) {
  return self->counterTextColor_;
}

id ASTextInputLayoutImpl_getCounterOverflowTextColor(ASTextInputLayoutImpl *self) {
  return self->counterOverflowTextColor_;
}

void ASTextInputLayoutImpl_setPlaceholderTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->placeholderTextColor_ = objValue;
}

void ASTextInputLayoutImpl_setPlaceholderTextWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->placeholderText_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASTextInputLayoutImpl_setSuffixTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->suffixTextView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setPrefixTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->prefixTextView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

id ASTextInputLayoutImpl_getSuffixTextColor(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->suffixTextView_)) getAttributeWithNSString:@"textColor" withBoolean:true];
}

id ASTextInputLayoutImpl_getPrefixTextColor(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->prefixTextView_)) getAttributeWithNSString:@"textColor" withBoolean:true];
}

id ASTextInputLayoutImpl_getPlaceholderTextColor(ASTextInputLayoutImpl *self) {
  return self->placeholderTextColor_;
}

void ASTextInputLayoutImpl_setHintWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->placeholderText_ = (NSString *) cast_chk(objValue, [NSString class]);
  [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"text" withId:objValue withBoolean:true];
}

id ASTextInputLayoutImpl_getHint(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->hintView_)) getAttributeWithNSString:@"text" withBoolean:true];
}

id ASTextInputLayoutImpl_getHintTextColor(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->hintView_)) getAttributeWithNSString:@"textColor" withBoolean:true];
}

void ASTextInputLayoutImpl_setHintTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setHintEnabledWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->hintEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  [((id<ASIWidget>) nil_chk(self->hintView_)) setVisibleWithBoolean:self->hintEnabled_];
  [((id<ASIWidget>) nil_chk(self->hintView_)) requestLayout];
}

void ASTextInputLayoutImpl_setStartIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->startIcon_)) setAttributeWithNSString:@"onLongClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setStartIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->startIcon_)) setAttributeWithNSString:@"onClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setEndIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->endIcon_)) setAttributeWithNSString:@"onLongClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->endIcon_)) setAttributeWithNSString:@"onClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setEndIconVisibleWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->endIcon_)) setVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  [((id<ASIWidget>) nil_chk(self->endIcon_)) requestLayout];
}

void ASTextInputLayoutImpl_setStartIconVisibleWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->startIcon_)) setVisibleWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  [((id<ASIWidget>) nil_chk(self->startIcon_)) requestLayout];
}

void ASTextInputLayoutImpl_setHelperTextWithId_(ASTextInputLayoutImpl *self, id objValue) {
  ASTextInputLayoutImpl_setHelperTextEnabledWithId_(self, JavaLangBoolean_valueOfWithBoolean_(true));
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) setAttributeWithNSString:@"text" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setHelperTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setHelperTextEnabledWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->helperTextEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) setVisibleWithBoolean:self->helperTextEnabled_];
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setErrorTextColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) setAttributeWithNSString:@"textColor" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setErrorEnabledWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->errorEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) setVisibleWithBoolean:self->errorEnabled_];
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setMyErrorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  ASTextInputLayoutImpl_setErrorEnabledWithId_(self, JavaLangBoolean_valueOfWithBoolean_(true));
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) setAttributeWithNSString:@"text" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) requestLayout];
  if (self->errorIconDrawable_ != nil) {
    NSString *text = (NSString *) cast_chk(objValue, [NSString class]);
    [((id<ASIWidget>) nil_chk(self->errorIcon_)) setVisibleWithBoolean:text != nil && ![text java_isEmpty]];
    [((id<ASIWidget>) nil_chk(self->errorIcon_)) requestLayout];
  }
}

void ASTextInputLayoutImpl_setErrorIconOnLongClickListenerWithADView_OnLongClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnLongClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->errorIcon_)) setAttributeWithNSString:@"onLongClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setErrorIconOnClickListenerWithADView_OnClickListener_(ASTextInputLayoutImpl *self, id<ADView_OnClickListener> objValue) {
  [((id<ASIWidget>) nil_chk(self->errorIcon_)) setAttributeWithNSString:@"onClick" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_setErrorIconDrawableWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->errorIconDrawable_ = objValue;
  [((id<ASIWidget>) nil_chk(self->errorIcon_)) setAttributeWithNSString:@"src" withId:objValue withBoolean:true];
  NSString *text = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(self->errorTextView_)) getAttributeWithNSString:@"text" withBoolean:true], [NSString class]);
  [((id<ASIWidget>) nil_chk(self->errorIcon_)) setVisibleWithBoolean:text != nil && ![text java_isEmpty]];
  [((id<ASIWidget>) nil_chk(self->errorIcon_)) requestLayout];
}

id ASTextInputLayoutImpl_getErrorIconDrawable(ASTextInputLayoutImpl *self) {
  return [((id<ASIWidget>) nil_chk(self->errorIcon_)) getAttributeWithNSString:@"src" withBoolean:true];
}

void ASTextInputLayoutImpl_setEndIconModeWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->endIconMode_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  switch (self->endIconMode_) {
    case -1:
    ASTextInputLayoutImpl_setEndIconDrawableWithId_(self, self->endIconDrawable_);
    break;
    case 0:
    ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, nil);
    break;
    case 1:
    [self setEndIconInternalWithId:@"@drawable/password_eye" withBoolean:false];
    ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, new_ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(self));
    break;
    case 2:
    [self setEndIconInternalWithId:@"@drawable/icon_end_clear" withBoolean:false];
    ASTextInputLayoutImpl_setEndIconOnClickListenerWithADView_OnClickListener_(self, new_ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(self));
    break;
    case 3:
    [((id<ASIWidget>) nil_chk(self->endIcon_)) setAttributeWithNSString:@"onClick" withId:new_ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(self) withBoolean:true];
    ASTextInputLayoutImpl_updateIconStateWithBoolean_(self, true);
    break;
    default:
    break;
  }
  [((id<ASIWidget>) nil_chk(self->endIcon_)) requestLayout];
  ASTextInputLayoutImpl_setEndIconVisibleWithId_(self, JavaLangBoolean_valueOfWithBoolean_(self->endIconMode_ != 0));
}

id ASTextInputLayoutImpl_getEndIconMode(ASTextInputLayoutImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->endIconMode_);
}

void ASTextInputLayoutImpl_setBoxBackgroundColorStateListWithId_(ASTextInputLayoutImpl *self, id objValue) {
  if (self->boxBackgroundMode_ != 0) {
    ADColorStateList *colorStateList = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
    ADDrawable *stateListDrawable = ASViewImpl_getDrawableWithADColorStateList_(colorStateList);
    [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"background" withId:stateListDrawable withBoolean:true];
    if (self->boxBackgroundMode_ == 1) {
      [((id<ASIWidget>) nil_chk(self->mainWidget_)) setAttributeWithNSString:@"background" withId:stateListDrawable withBoolean:true];
    }
    if ([self isInitialised]) {
      ASTextInputLayoutImpl_syncBackground(self);
    }
  }
}

void ASTextInputLayoutImpl_setBoxBackgroundModeWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->boxBackgroundMode_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  switch (self->boxBackgroundMode_) {
    case 0:
    break;
    case 1:
    break;
    case 2:
    [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderWidth" withId:@"1dp" withBoolean:false];
    if (ASTextInputLayoutImpl_isPaddingFixNeeded(self)) {
      [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"padding" withId:@"1dp" withBoolean:false];
    }
    break;
    default:
    break;
  }
}

void ASTextInputLayoutImpl_setBoxStrokeWidthWithId_(ASTextInputLayoutImpl *self, id objValue) {
  if (self->boxBackgroundMode_ == 2) {
    [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderWidth" withId:objValue withBoolean:true];
    if (ASTextInputLayoutImpl_isPaddingFixNeeded(self)) {
      [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"padding" withId:objValue withBoolean:true];
    }
  }
}

void ASTextInputLayoutImpl_setBoxStrokeErrorColorWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->boxStrokeErrorColor_ = objValue;
}

void ASTextInputLayoutImpl_setBoxCornerRadiusBottomStartWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderBottomLeftRadius" withId:objValue withBoolean:true];
  ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(self, objValue);
}

void ASTextInputLayoutImpl_setBoxCornerRadiusBottomEndWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderBottomRightRadius" withId:objValue withBoolean:true];
  ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(self, objValue);
}

void ASTextInputLayoutImpl_setBoxCornerRadiusTopEndWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderTopRightRadius" withId:objValue withBoolean:true];
  ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(self, objValue);
}

void ASTextInputLayoutImpl_setBoxCornerRadiusTopStartWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"borderTopLeftRadius" withId:objValue withBoolean:true];
  ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(self, objValue);
}

void ASTextInputLayoutImpl_fixBorderRadiusPaddingWithId_(ASTextInputLayoutImpl *self, id objValue) {
  if (ASTextInputLayoutImpl_isPaddingFixNeeded(self)) {
    [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"padding" withId:JavaLangInteger_valueOfWithInt_(JreFpToInt(([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue] / 2))) withBoolean:true];
  }
}

id ASTextInputLayoutImpl_getBoxStrokeErrorColor(ASTextInputLayoutImpl *self) {
  return self->boxStrokeErrorColor_;
}

void ASTextInputLayoutImpl_setEnabledWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->enabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASTextInputLayoutImpl_setBoxStrokeColorStateListWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->boxStrokeColor_ = objValue;
}

void ASTextInputLayoutImpl_updateIconStateWithBoolean_(ASTextInputLayoutImpl *self, jboolean hide) {
  self->popUpShowing_ = !hide;
  if (self->endIconMode_ == 3) {
    if (!hide) {
      [self setEndIconInternalWithId:@"@drawable/icon_end_menu_up" withBoolean:false];
    }
    else {
      [self setEndIconInternalWithId:@"@drawable/icon_end_menu_down" withBoolean:false];
    }
  }
}

void ASTextInputLayoutImpl_setHintTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->hintView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->hintView_)) requestLayout];
}

void ASTextInputLayoutImpl_setSuffixTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->suffixTextView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->suffixTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setCounterOverflowTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->counterOverflowTextAppearance_ = objValue;
}

void ASTextInputLayoutImpl_setPrefixTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->prefixTextView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->prefixTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setHelperTextTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->helperTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setErrorTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->errorTextView_)) requestLayout];
}

void ASTextInputLayoutImpl_setCounterTextAppearanceWithId_(ASTextInputLayoutImpl *self, id objValue) {
  self->counterTextAppearance_ = objValue;
  [((id<ASIWidget>) nil_chk(self->counterView_)) setAttributeWithNSString:@"textAppearance" withId:objValue withBoolean:true];
  [((id<ASIWidget>) nil_chk(self->counterView_)) requestLayout];
}

void ASTextInputLayoutImpl_setErrorWithId_(ASTextInputLayoutImpl *self, id object) {
}

void ASTextInputLayoutImpl_setBoxPaddingWithId_(ASTextInputLayoutImpl *self, id objValue) {
  [((id<ASIWidget>) nil_chk(self->innerLayout_)) setAttributeWithNSString:@"padding" withId:objValue withBoolean:true];
}

void ASTextInputLayoutImpl_syncBackground(ASTextInputLayoutImpl *self) {
}

jboolean ASTextInputLayoutImpl_isPaddingFixNeeded(ASTextInputLayoutImpl *self) {
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl)

@implementation ASTextInputLayoutImpl_EndIconMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextInputLayoutImpl_EndIconMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextInputLayoutImpl;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_EndIconMode = { "EndIconMode", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_EndIconMode;
}

@end

void ASTextInputLayoutImpl_EndIconMode_init(ASTextInputLayoutImpl_EndIconMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"custom" withId:JavaLangInteger_valueOfWithInt_(-1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"password_toggle" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"clear_text" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"dropdown_menu" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASTextInputLayoutImpl_EndIconMode *new_ASTextInputLayoutImpl_EndIconMode_init() {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_EndIconMode, init)
}

ASTextInputLayoutImpl_EndIconMode *create_ASTextInputLayoutImpl_EndIconMode_init() {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_EndIconMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_EndIconMode)

@implementation ASTextInputLayoutImpl_BoxBackgroundMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextInputLayoutImpl_BoxBackgroundMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextInputLayoutImpl;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_BoxBackgroundMode = { "BoxBackgroundMode", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_BoxBackgroundMode;
}

@end

void ASTextInputLayoutImpl_BoxBackgroundMode_init(ASTextInputLayoutImpl_BoxBackgroundMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"filled" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"outline" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASTextInputLayoutImpl_BoxBackgroundMode *new_ASTextInputLayoutImpl_BoxBackgroundMode_init() {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_BoxBackgroundMode, init)
}

ASTextInputLayoutImpl_BoxBackgroundMode *create_ASTextInputLayoutImpl_BoxBackgroundMode_init() {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_BoxBackgroundMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_BoxBackgroundMode)

@implementation ASTextInputLayoutImpl_TextInputLayoutExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_TextInputLayoutExt_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:true];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASTextInputLayoutImpl_TextInputLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASTextInputLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_TextInputLayoutExt = { "TextInputLayoutExt", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x1, 38, 6, 3, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_TextInputLayoutExt;
}

@end

void ASTextInputLayoutImpl_TextInputLayoutExt_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_TextInputLayoutExt *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADLinearLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASTextInputLayoutImpl_TextInputLayoutExt *new_ASTextInputLayoutImpl_TextInputLayoutExt_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_TextInputLayoutExt, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_TextInputLayoutExt *create_ASTextInputLayoutImpl_TextInputLayoutExt_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_TextInputLayoutExt, initWithASTextInputLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_TextInputLayoutExt)

@implementation ASTextInputLayoutImpl_1

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$
                            withADTextWatcher:(id<ADTextWatcher>)capture$0 {
  ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(self, outer$, capture$0);
  return self;
}

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after {
}

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count {
  if (val$oldTextWatcher_ != nil) {
    [val$oldTextWatcher_ onTextChangedWithJavaLangCharSequence:s withInt:start withInt:before withInt:count];
  }
  if (ASTextInputLayoutImpl_updateViewsWithJavaLangCharSequence_(this$0_, s)) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:withADTextWatcher:);
  methods[1].selector = @selector(beforeTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[2].selector = @selector(onTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[3].selector = @selector(afterTextChangedWithADEditable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$oldTextWatcher_", "LADTextWatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;LADTextWatcher;", "beforeTextChanged", "LJavaLangCharSequence;III", "onTextChanged", "afterTextChanged", "LADEditable;", "LASTextInputLayoutImpl;", "initialized" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_1 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 4, 2, 6, -1, 7, -1, -1 };
  return &_ASTextInputLayoutImpl_1;
}

@end

void ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl_1 *self, ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0) {
  self->this$0_ = outer$;
  self->val$oldTextWatcher_ = capture$0;
  NSObject_init(self);
}

ASTextInputLayoutImpl_1 *new_ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_1, initWithASTextInputLayoutImpl_withADTextWatcher_, outer$, capture$0)
}

ASTextInputLayoutImpl_1 *create_ASTextInputLayoutImpl_1_initWithASTextInputLayoutImpl_withADTextWatcher_(ASTextInputLayoutImpl *outer$, id<ADTextWatcher> capture$0) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_1, initWithASTextInputLayoutImpl_withADTextWatcher_, outer$, capture$0)
}

@implementation ASTextInputLayoutImpl_2

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onChanged {
  ASTextInputLayoutImpl_updateIconStateWithBoolean_(this$0_, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "updateViewsWithJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_2 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 1, -1, -1 };
  return &_ASTextInputLayoutImpl_2;
}

@end

void ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_2 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADDataSetObserver_init(self);
}

ASTextInputLayoutImpl_2 *new_ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_2, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_2 *create_ASTextInputLayoutImpl_2_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_2, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_3

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onDismiss {
  ASTextInputLayoutImpl_updateIconStateWithBoolean_(this$0_, true);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onDismiss);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "updateViewsWithJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_3 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 1, -1, -1 };
  return &_ASTextInputLayoutImpl_3;
}

@end

void ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_3 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASTextInputLayoutImpl_3 *new_ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_3, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_3 *create_ASTextInputLayoutImpl_3_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_3, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_4

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus {
  if (hasFocus) {
    [((id<ASIWidget>) nil_chk(this$0_->editText_)) setAttributeWithNSString:@"showDropDown" withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onFocusChangeWithADView:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "onFocusChange", "LADView;Z", "updateViewsWithJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_4 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASTextInputLayoutImpl_4;
}

@end

void ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_4 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASTextInputLayoutImpl_4 *new_ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_4, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_4 *create_ASTextInputLayoutImpl_4_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_4, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_5

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (password_) {
    [this$0_ setEndIconInternalWithId:@"@drawable/password_eye" withBoolean:false];
  }
  else {
    [this$0_ setEndIconInternalWithId:@"@drawable/password_eye_off" withBoolean:false];
  }
  if (this$0_->editText_ != nil) {
    [this$0_->editText_ setAttributeWithNSString:@"password" withId:JavaLangBoolean_valueOfWithBoolean_(password_) withBoolean:true];
  }
  password_ = !password_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "password_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "onClick", "LADView;", "setEndIconModeWithId:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_5 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 2, 0, -1, 3, -1, -1 };
  return &_ASTextInputLayoutImpl_5;
}

@end

void ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_5 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->password_ = false;
}

ASTextInputLayoutImpl_5 *new_ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_5, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_5 *create_ASTextInputLayoutImpl_5_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_5, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_6

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (this$0_->editText_ != nil) {
    [this$0_->editText_ setAttributeWithNSString:@"text" withId:@"" withBoolean:true];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "onClick", "LADView;", "setEndIconModeWithId:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_6 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASTextInputLayoutImpl_6;
}

@end

void ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_6 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASTextInputLayoutImpl_6 *new_ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_6, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_6 *create_ASTextInputLayoutImpl_6_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_6, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_7

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (this$0_->popUpShowing_) {
    [((id<ASIWidget>) nil_chk(this$0_->editText_)) setAttributeWithNSString:@"showDropDown" withId:JavaLangBoolean_valueOfWithBoolean_(false) withBoolean:true];
  }
  else {
    [((id<ASIWidget>) nil_chk(this$0_->editText_)) setAttributeWithNSString:@"setFocus" withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
    [((id<ASIWidget>) nil_chk(this$0_->editText_)) setAttributeWithNSString:@"showDropDown" withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "onClick", "LADView;", "setEndIconModeWithId:" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_7 = { "", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASTextInputLayoutImpl_7;
}

@end

void ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_7 *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASTextInputLayoutImpl_7 *new_ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_7, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_7 *create_ASTextInputLayoutImpl_7_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_7, initWithASTextInputLayoutImpl_, outer$)
}

@implementation ASTextInputLayoutImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASTextInputLayoutImpl;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_OnClickListener = { "OnClickListener", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_OnClickListener;
}

@end

void ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(ASTextInputLayoutImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASTextInputLayoutImpl_OnClickListener *new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASTextInputLayoutImpl_OnClickListener *create_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASTextInputLayoutImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASTextInputLayoutImpl_OnClickListener *new_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASTextInputLayoutImpl_OnClickListener *create_ASTextInputLayoutImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_OnClickListener)

@implementation ASTextInputLayoutImpl_OnLongClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onLongClickWithADView:(ADView *)v {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onLongClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onLongClick"];
    id<JavaUtilMap> obj = [self getOnLongClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"longclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onLongClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onLongClickWithADView:);
  methods[4].selector = @selector(getOnLongClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onLongClick", "LADView;", "getOnLongClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASTextInputLayoutImpl;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_OnLongClickListener = { "OnLongClickListener", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_OnLongClickListener;
}

@end

void ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASTextInputLayoutImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASTextInputLayoutImpl_OnLongClickListener *new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASTextInputLayoutImpl_OnLongClickListener *create_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASTextInputLayoutImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASTextInputLayoutImpl_OnLongClickListener *new_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASTextInputLayoutImpl_OnLongClickListener *create_ASTextInputLayoutImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_OnLongClickListener)

@implementation ASTextInputLayoutImpl_TextInputLayoutCommandBuilder

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_TextInputLayoutCommandBuilder_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setPrefixTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"prefixText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setSuffixTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"suffixText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetEndIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getEndIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconDrawable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEndIconDrawableWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetStartIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getStartIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconDrawable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setStartIconDrawableWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetCounterMaxLength {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterMaxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getCounterMaxLength {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterMaxLength"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterMaxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetCounterOverflowTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterOverflowTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getCounterOverflowTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterOverflowTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterOverflowTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterOverflowTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetCounterTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getCounterTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHintEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetHintTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHintTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHintTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setPlaceholderTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"placeholderText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetPlaceholderTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"placeholderTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPlaceholderTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"placeholderTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setPlaceholderTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"placeholderTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetPrefixTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"prefixTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPrefixTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"prefixTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setPrefixTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"prefixTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetSuffixTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"suffixTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getSuffixTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"suffixTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setSuffixTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"suffixTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEndIconOnClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconOnClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEndIconOnLongClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconOnLongClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setStartIconOnClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconOnClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setStartIconOnLongClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconOnLongClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setStartIconVisibleWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startIconVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEndIconVisibleWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHelperTextEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"helperTextEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHelperTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"helperTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHelperTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"helperText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"error"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetErrorIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getErrorIconDrawable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorIconDrawable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorIconDrawableWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorIconDrawable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorIconOnClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorIconOnClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorIconOnLongClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorIconOnLongClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetEndIconMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getEndIconMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEndIconModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"endIconMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxBackgroundModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxBackgroundMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxBackgroundColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxBackgroundColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxCornerRadiusTopStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxCornerRadiusTopStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxCornerRadiusTopEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxCornerRadiusTopEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxCornerRadiusBottomEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxCornerRadiusBottomEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxCornerRadiusBottomStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxCornerRadiusBottomStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)tryGetBoxStrokeErrorColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxStrokeErrorColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBoxStrokeErrorColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxStrokeErrorColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxStrokeErrorColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxStrokeErrorColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxStrokeWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxStrokeWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxStrokeColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxStrokeColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHintTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterOverflowTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterOverflowTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setCounterTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"counterTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setErrorTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setHelperTextTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"helperTextTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setPrefixTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"prefixTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setSuffixTextAppearanceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"suffixTextAppearance"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *)setBoxPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"boxPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 39, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 46, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 47, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 48, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 49, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 50, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 51, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 52, 4, -1, -1, -1, -1 },
    { NULL, "LASTextInputLayoutImpl_TextInputLayoutCommandBuilder;", 0x1, 53, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetHint);
  methods[3].selector = @selector(getHint);
  methods[4].selector = @selector(setHintWithNSString:);
  methods[5].selector = @selector(setPrefixTextWithNSString:);
  methods[6].selector = @selector(setSuffixTextWithNSString:);
  methods[7].selector = @selector(tryGetEndIconDrawable);
  methods[8].selector = @selector(getEndIconDrawable);
  methods[9].selector = @selector(setEndIconDrawableWithNSString:);
  methods[10].selector = @selector(tryGetStartIconDrawable);
  methods[11].selector = @selector(getStartIconDrawable);
  methods[12].selector = @selector(setStartIconDrawableWithNSString:);
  methods[13].selector = @selector(setCounterEnabledWithBoolean:);
  methods[14].selector = @selector(tryGetCounterMaxLength);
  methods[15].selector = @selector(getCounterMaxLength);
  methods[16].selector = @selector(setCounterMaxLengthWithInt:);
  methods[17].selector = @selector(tryGetCounterOverflowTextColor);
  methods[18].selector = @selector(getCounterOverflowTextColor);
  methods[19].selector = @selector(setCounterOverflowTextColorWithNSString:);
  methods[20].selector = @selector(tryGetCounterTextColor);
  methods[21].selector = @selector(getCounterTextColor);
  methods[22].selector = @selector(setCounterTextColorWithNSString:);
  methods[23].selector = @selector(setHintEnabledWithBoolean:);
  methods[24].selector = @selector(tryGetHintTextColor);
  methods[25].selector = @selector(getHintTextColor);
  methods[26].selector = @selector(setHintTextColorWithNSString:);
  methods[27].selector = @selector(setPlaceholderTextWithNSString:);
  methods[28].selector = @selector(tryGetPlaceholderTextColor);
  methods[29].selector = @selector(getPlaceholderTextColor);
  methods[30].selector = @selector(setPlaceholderTextColorWithNSString:);
  methods[31].selector = @selector(tryGetPrefixTextColor);
  methods[32].selector = @selector(getPrefixTextColor);
  methods[33].selector = @selector(setPrefixTextColorWithNSString:);
  methods[34].selector = @selector(tryGetSuffixTextColor);
  methods[35].selector = @selector(getSuffixTextColor);
  methods[36].selector = @selector(setSuffixTextColorWithNSString:);
  methods[37].selector = @selector(setEndIconOnClickWithNSString:);
  methods[38].selector = @selector(setEndIconOnLongClickWithNSString:);
  methods[39].selector = @selector(setStartIconOnClickWithNSString:);
  methods[40].selector = @selector(setStartIconOnLongClickWithNSString:);
  methods[41].selector = @selector(setStartIconVisibleWithBoolean:);
  methods[42].selector = @selector(setEndIconVisibleWithBoolean:);
  methods[43].selector = @selector(setHelperTextEnabledWithBoolean:);
  methods[44].selector = @selector(setHelperTextColorWithNSString:);
  methods[45].selector = @selector(setHelperTextWithNSString:);
  methods[46].selector = @selector(setErrorWithNSString:);
  methods[47].selector = @selector(setErrorEnabledWithBoolean:);
  methods[48].selector = @selector(setErrorTextColorWithNSString:);
  methods[49].selector = @selector(tryGetErrorIconDrawable);
  methods[50].selector = @selector(getErrorIconDrawable);
  methods[51].selector = @selector(setErrorIconDrawableWithNSString:);
  methods[52].selector = @selector(setErrorIconOnClickWithNSString:);
  methods[53].selector = @selector(setErrorIconOnLongClickWithNSString:);
  methods[54].selector = @selector(tryGetEndIconMode);
  methods[55].selector = @selector(getEndIconMode);
  methods[56].selector = @selector(setEndIconModeWithNSString:);
  methods[57].selector = @selector(setBoxBackgroundModeWithNSString:);
  methods[58].selector = @selector(setBoxBackgroundColorWithNSString:);
  methods[59].selector = @selector(setBoxCornerRadiusTopStartWithNSString:);
  methods[60].selector = @selector(setBoxCornerRadiusTopEndWithNSString:);
  methods[61].selector = @selector(setBoxCornerRadiusBottomEndWithNSString:);
  methods[62].selector = @selector(setBoxCornerRadiusBottomStartWithNSString:);
  methods[63].selector = @selector(tryGetBoxStrokeErrorColor);
  methods[64].selector = @selector(getBoxStrokeErrorColor);
  methods[65].selector = @selector(setBoxStrokeErrorColorWithNSString:);
  methods[66].selector = @selector(setBoxStrokeWidthWithNSString:);
  methods[67].selector = @selector(setBoxStrokeColorWithNSString:);
  methods[68].selector = @selector(setEnabledWithBoolean:);
  methods[69].selector = @selector(setHintTextAppearanceWithNSString:);
  methods[70].selector = @selector(setCounterOverflowTextAppearanceWithNSString:);
  methods[71].selector = @selector(setCounterTextAppearanceWithNSString:);
  methods[72].selector = @selector(setErrorTextAppearanceWithNSString:);
  methods[73].selector = @selector(setHelperTextTextAppearanceWithNSString:);
  methods[74].selector = @selector(setPrefixTextAppearanceWithNSString:);
  methods[75].selector = @selector(setSuffixTextAppearanceWithNSString:);
  methods[76].selector = @selector(setBoxPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "execute", "Z", "setHint", "LNSString;", "setPrefixText", "setSuffixText", "setEndIconDrawable", "setStartIconDrawable", "setCounterEnabled", "setCounterMaxLength", "I", "setCounterOverflowTextColor", "setCounterTextColor", "setHintEnabled", "setHintTextColor", "setPlaceholderText", "setPlaceholderTextColor", "setPrefixTextColor", "setSuffixTextColor", "setEndIconOnClick", "setEndIconOnLongClick", "setStartIconOnClick", "setStartIconOnLongClick", "setStartIconVisible", "setEndIconVisible", "setHelperTextEnabled", "setHelperTextColor", "setHelperText", "setError", "setErrorEnabled", "setErrorTextColor", "setErrorIconDrawable", "setErrorIconOnClick", "setErrorIconOnLongClick", "setEndIconMode", "setBoxBackgroundMode", "setBoxBackgroundColor", "setBoxCornerRadiusTopStart", "setBoxCornerRadiusTopEnd", "setBoxCornerRadiusBottomEnd", "setBoxCornerRadiusBottomStart", "setBoxStrokeErrorColor", "setBoxStrokeWidth", "setBoxStrokeColor", "setEnabled", "setHintTextAppearance", "setCounterOverflowTextAppearance", "setCounterTextAppearance", "setErrorTextAppearance", "setHelperTextTextAppearance", "setPrefixTextAppearance", "setSuffixTextAppearance", "setBoxPadding", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/textinputlayout/TextInputLayoutImpl$TextInputLayoutCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_TextInputLayoutCommandBuilder = { "TextInputLayoutCommandBuilder", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x1, 77, 1, 0, -1, -1, 54, -1 };
  return &_ASTextInputLayoutImpl_TextInputLayoutCommandBuilder;
}

@end

void ASTextInputLayoutImpl_TextInputLayoutCommandBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *new_ASTextInputLayoutImpl_TextInputLayoutCommandBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_TextInputLayoutCommandBuilder, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *create_ASTextInputLayoutImpl_TextInputLayoutCommandBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_TextInputLayoutCommandBuilder, initWithASTextInputLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_TextInputLayoutCommandBuilder)

@implementation ASTextInputLayoutImpl_TextInputLayoutBean

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_TextInputLayoutBean_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

- (id)getHint {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHint])) executeWithBoolean:false])) getHint];
}

- (void)setHintWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintWithNSString:value])) executeWithBoolean:true];
}

- (void)setPrefixTextWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPrefixTextWithNSString:value])) executeWithBoolean:true];
}

- (void)setSuffixTextWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSuffixTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getEndIconDrawable {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetEndIconDrawable])) executeWithBoolean:false])) getEndIconDrawable];
}

- (void)setEndIconDrawableWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEndIconDrawableWithNSString:value])) executeWithBoolean:true];
}

- (id)getStartIconDrawable {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetStartIconDrawable])) executeWithBoolean:false])) getStartIconDrawable];
}

- (void)setStartIconDrawableWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStartIconDrawableWithNSString:value])) executeWithBoolean:true];
}

- (void)setCounterEnabledWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)getCounterMaxLength {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCounterMaxLength])) executeWithBoolean:false])) getCounterMaxLength];
}

- (void)setCounterMaxLengthWithInt:(jint)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (id)getCounterOverflowTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCounterOverflowTextColor])) executeWithBoolean:false])) getCounterOverflowTextColor];
}

- (void)setCounterOverflowTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterOverflowTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getCounterTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCounterTextColor])) executeWithBoolean:false])) getCounterTextColor];
}

- (void)setCounterTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setHintEnabledWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)getHintTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHintTextColor])) executeWithBoolean:false])) getHintTextColor];
}

- (void)setHintTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setPlaceholderTextWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPlaceholderTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getPlaceholderTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPlaceholderTextColor])) executeWithBoolean:false])) getPlaceholderTextColor];
}

- (void)setPlaceholderTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPlaceholderTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getPrefixTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPrefixTextColor])) executeWithBoolean:false])) getPrefixTextColor];
}

- (void)setPrefixTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPrefixTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getSuffixTextColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetSuffixTextColor])) executeWithBoolean:false])) getSuffixTextColor];
}

- (void)setSuffixTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSuffixTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setEndIconOnClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEndIconOnClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setEndIconOnLongClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEndIconOnLongClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setStartIconOnClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStartIconOnClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setStartIconOnLongClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStartIconOnLongClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setStartIconVisibleWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStartIconVisibleWithBoolean:value])) executeWithBoolean:true];
}

- (void)setEndIconVisibleWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEndIconVisibleWithBoolean:value])) executeWithBoolean:true];
}

- (void)setHelperTextEnabledWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHelperTextEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setHelperTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHelperTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setHelperTextWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHelperTextWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorEnabledWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setErrorTextColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getErrorIconDrawable {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetErrorIconDrawable])) executeWithBoolean:false])) getErrorIconDrawable];
}

- (void)setErrorIconDrawableWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorIconDrawableWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorIconOnClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorIconOnClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorIconOnLongClickWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorIconOnLongClickWithNSString:value])) executeWithBoolean:true];
}

- (id)getEndIconMode {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetEndIconMode])) executeWithBoolean:false])) getEndIconMode];
}

- (void)setEndIconModeWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEndIconModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxBackgroundModeWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxBackgroundModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxBackgroundColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxBackgroundColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxCornerRadiusTopStartWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxCornerRadiusTopStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxCornerRadiusTopEndWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxCornerRadiusTopEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxCornerRadiusBottomEndWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxCornerRadiusBottomEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxCornerRadiusBottomStartWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxCornerRadiusBottomStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getBoxStrokeErrorColor {
  return [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBoxStrokeErrorColor])) executeWithBoolean:false])) getBoxStrokeErrorColor];
}

- (void)setBoxStrokeErrorColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxStrokeErrorColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxStrokeWidthWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxStrokeWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxStrokeColorWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxStrokeColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setHintTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setCounterOverflowTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterOverflowTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setCounterTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCounterTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setErrorTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setHelperTextTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHelperTextTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setPrefixTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPrefixTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setSuffixTextAppearanceWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSuffixTextAppearanceWithNSString:value])) executeWithBoolean:true];
}

- (void)setBoxPaddingWithNSString:(NSString *)value {
  (void) [((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([((ASTextInputLayoutImpl_TextInputLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBoxPaddingWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  methods[1].selector = @selector(getHint);
  methods[2].selector = @selector(setHintWithNSString:);
  methods[3].selector = @selector(setPrefixTextWithNSString:);
  methods[4].selector = @selector(setSuffixTextWithNSString:);
  methods[5].selector = @selector(getEndIconDrawable);
  methods[6].selector = @selector(setEndIconDrawableWithNSString:);
  methods[7].selector = @selector(getStartIconDrawable);
  methods[8].selector = @selector(setStartIconDrawableWithNSString:);
  methods[9].selector = @selector(setCounterEnabledWithBoolean:);
  methods[10].selector = @selector(getCounterMaxLength);
  methods[11].selector = @selector(setCounterMaxLengthWithInt:);
  methods[12].selector = @selector(getCounterOverflowTextColor);
  methods[13].selector = @selector(setCounterOverflowTextColorWithNSString:);
  methods[14].selector = @selector(getCounterTextColor);
  methods[15].selector = @selector(setCounterTextColorWithNSString:);
  methods[16].selector = @selector(setHintEnabledWithBoolean:);
  methods[17].selector = @selector(getHintTextColor);
  methods[18].selector = @selector(setHintTextColorWithNSString:);
  methods[19].selector = @selector(setPlaceholderTextWithNSString:);
  methods[20].selector = @selector(getPlaceholderTextColor);
  methods[21].selector = @selector(setPlaceholderTextColorWithNSString:);
  methods[22].selector = @selector(getPrefixTextColor);
  methods[23].selector = @selector(setPrefixTextColorWithNSString:);
  methods[24].selector = @selector(getSuffixTextColor);
  methods[25].selector = @selector(setSuffixTextColorWithNSString:);
  methods[26].selector = @selector(setEndIconOnClickWithNSString:);
  methods[27].selector = @selector(setEndIconOnLongClickWithNSString:);
  methods[28].selector = @selector(setStartIconOnClickWithNSString:);
  methods[29].selector = @selector(setStartIconOnLongClickWithNSString:);
  methods[30].selector = @selector(setStartIconVisibleWithBoolean:);
  methods[31].selector = @selector(setEndIconVisibleWithBoolean:);
  methods[32].selector = @selector(setHelperTextEnabledWithBoolean:);
  methods[33].selector = @selector(setHelperTextColorWithNSString:);
  methods[34].selector = @selector(setHelperTextWithNSString:);
  methods[35].selector = @selector(setErrorWithNSString:);
  methods[36].selector = @selector(setErrorEnabledWithBoolean:);
  methods[37].selector = @selector(setErrorTextColorWithNSString:);
  methods[38].selector = @selector(getErrorIconDrawable);
  methods[39].selector = @selector(setErrorIconDrawableWithNSString:);
  methods[40].selector = @selector(setErrorIconOnClickWithNSString:);
  methods[41].selector = @selector(setErrorIconOnLongClickWithNSString:);
  methods[42].selector = @selector(getEndIconMode);
  methods[43].selector = @selector(setEndIconModeWithNSString:);
  methods[44].selector = @selector(setBoxBackgroundModeWithNSString:);
  methods[45].selector = @selector(setBoxBackgroundColorWithNSString:);
  methods[46].selector = @selector(setBoxCornerRadiusTopStartWithNSString:);
  methods[47].selector = @selector(setBoxCornerRadiusTopEndWithNSString:);
  methods[48].selector = @selector(setBoxCornerRadiusBottomEndWithNSString:);
  methods[49].selector = @selector(setBoxCornerRadiusBottomStartWithNSString:);
  methods[50].selector = @selector(getBoxStrokeErrorColor);
  methods[51].selector = @selector(setBoxStrokeErrorColorWithNSString:);
  methods[52].selector = @selector(setBoxStrokeWidthWithNSString:);
  methods[53].selector = @selector(setBoxStrokeColorWithNSString:);
  methods[54].selector = @selector(setEnabledWithBoolean:);
  methods[55].selector = @selector(setHintTextAppearanceWithNSString:);
  methods[56].selector = @selector(setCounterOverflowTextAppearanceWithNSString:);
  methods[57].selector = @selector(setCounterTextAppearanceWithNSString:);
  methods[58].selector = @selector(setErrorTextAppearanceWithNSString:);
  methods[59].selector = @selector(setHelperTextTextAppearanceWithNSString:);
  methods[60].selector = @selector(setPrefixTextAppearanceWithNSString:);
  methods[61].selector = @selector(setSuffixTextAppearanceWithNSString:);
  methods[62].selector = @selector(setBoxPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextInputLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "setHint", "LNSString;", "setPrefixText", "setSuffixText", "setEndIconDrawable", "setStartIconDrawable", "setCounterEnabled", "Z", "setCounterMaxLength", "I", "setCounterOverflowTextColor", "setCounterTextColor", "setHintEnabled", "setHintTextColor", "setPlaceholderText", "setPlaceholderTextColor", "setPrefixTextColor", "setSuffixTextColor", "setEndIconOnClick", "setEndIconOnLongClick", "setStartIconOnClick", "setStartIconOnLongClick", "setStartIconVisible", "setEndIconVisible", "setHelperTextEnabled", "setHelperTextColor", "setHelperText", "setError", "setErrorEnabled", "setErrorTextColor", "setErrorIconDrawable", "setErrorIconOnClick", "setErrorIconOnLongClick", "setEndIconMode", "setBoxBackgroundMode", "setBoxBackgroundColor", "setBoxCornerRadiusTopStart", "setBoxCornerRadiusTopEnd", "setBoxCornerRadiusBottomEnd", "setBoxCornerRadiusBottomStart", "setBoxStrokeErrorColor", "setBoxStrokeWidth", "setBoxStrokeColor", "setEnabled", "setHintTextAppearance", "setCounterOverflowTextAppearance", "setCounterTextAppearance", "setErrorTextAppearance", "setHelperTextTextAppearance", "setPrefixTextAppearance", "setSuffixTextAppearance", "setBoxPadding" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_TextInputLayoutBean = { "TextInputLayoutBean", "com.ashera.textinputlayout", ptrTable, methods, fields, 7, 0x1, 63, 1, 0, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_TextInputLayoutBean;
}

@end

void ASTextInputLayoutImpl_TextInputLayoutBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_TextInputLayoutBean *self, ASTextInputLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASTextInputLayoutImpl_TextInputLayoutBean *new_ASTextInputLayoutImpl_TextInputLayoutBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_TextInputLayoutBean, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_TextInputLayoutBean *create_ASTextInputLayoutImpl_TextInputLayoutBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_TextInputLayoutBean, initWithASTextInputLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_TextInputLayoutBean)

@implementation ASTextInputLayoutImpl_TextInputLayoutParamsBean

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_TextInputLayoutParamsBean_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_TextInputLayoutParamsBean = { "TextInputLayoutParamsBean", "com.ashera.textinputlayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASTextInputLayoutImpl_TextInputLayoutParamsBean;
}

@end

void ASTextInputLayoutImpl_TextInputLayoutParamsBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_TextInputLayoutParamsBean *self, ASTextInputLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASTextInputLayoutImpl_TextInputLayoutParamsBean *new_ASTextInputLayoutImpl_TextInputLayoutParamsBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_TextInputLayoutParamsBean, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_TextInputLayoutParamsBean *create_ASTextInputLayoutImpl_TextInputLayoutParamsBean_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_TextInputLayoutParamsBean, initWithASTextInputLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_TextInputLayoutParamsBean)

@implementation ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder

- (instancetype)initWithASTextInputLayoutImpl:(ASTextInputLayoutImpl *)outer$ {
  ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder_initWithASTextInputLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextInputLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTextInputLayoutImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/textinputlayout/TextInputLayoutImpl$TextInputLayoutCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder = { "TextInputLayoutCommandParamsBuilder", "com.ashera.textinputlayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder;
}

@end

void ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *self, ASTextInputLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *new_ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder, initWithASTextInputLayoutImpl_, outer$)
}

ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder *create_ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder_initWithASTextInputLayoutImpl_(ASTextInputLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder, initWithASTextInputLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextInputLayoutImpl_TextInputLayoutCommandParamsBuilder)

@implementation ASTextInputLayoutImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(ASTextInputLayoutImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASTextInputLayoutImpl_$Lambda$1 *new_ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASTextInputLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASTextInputLayoutImpl_$Lambda$1 *create_ASTextInputLayoutImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASTextInputLayoutImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
